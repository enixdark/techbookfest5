= とあるエンジニアの憂鬱

== はじめに

みなさんこんにちは。るなすたです。
今回は、bitcoin とそこからフォークした各種アルトコインの抱える
潜在的な問題について語ろうと思います。

前提となる知識が少々多いですが、頑張ってついてきていただけると幸いです。

== 前提知識

=== トランザクションの構造と所有権の移転履歴

bitcoin およびそこからフォークした各種アルトコインは、
所有権の移転情報、つまりトランザクションを、リンクドリストの
形式で保持しています。

つまり、新規に作成されたトランザクションは、
最後のトランザクションのトランザクション ID（以下 TXID）を
持つことで、コインの所有権移転履歴を管理しているということです。

ある残高情報のトランザクション、そのデータ構造の持つ TXID を
辿るとその直前のトランザクションを見つけることができ、
さらにそのトランザクションデータの持つ TXID を辿ることで、
さらにその前のトランザクションデータを得ることができ、
最終的にはコインベーストランザクション、つまりブロックの
マイニング報酬のトランザクションへと辿りつく仕組みです。

=== TXID とトランザクションデータ

さて、ところで TXID はどうやって決めているのでしょうか？

答えは簡単で、トランザクションの生データ、これの SHA-256 ハッシュ値です。

SHA-256 ハッシュ値は、入力データ長には依存せずに 256bit の長さを持ち、
入力データに対してほぼほぼランダムな値を生成します。
ここで注目したいのは、別に一意性が保証されているわけではないという点です。
つまり、異なるトランザクションに対して同一の TXID が割り当てられる場合が
確率的には存在するということです。

勘のいい方はここで「あれ？」と思うのではないでしょうか。
TXID はトランザクションの識別、つまりプライマリキーとして使用するものなのに、
一意性が保証されていない。一意性が保証されていないものをプライマリキーとして使用する？
マジで？正気？と思うのではないでしょうか？

正直に言えばこの時点で設計ミスと言わざるを得ません。後述しますがブロック内でトランザクションには
「順番」があるので、TXID を「ブロックハッシュ＋ブロック内連番」などにしていれば、
（衝突したブロックハッシュはマイニング成功とはみなされないため）今回の問題は
そもそも発生しなかったのですから。

大事なことなので言い方を変えてもう一度、
「bitcoin およびそこからフォークしたすべての暗号通貨は、
トランザクションのハッシュ値が衝突しない仮定の上で稼働しています」。

=== コインベーストランザクションとマイニング報酬

すべてのトランザクションには、入力と出力があり、
それぞれが別のトランザクションへと接続されていますが、
全てのブロックにそれぞれただ１つ、入力側が接続されていない
トランザクションが存在します。

それが、コインベーストランザクションと呼ばれるもので、
全てのブロックにただ１つ存在し、マイニング報酬を与えるため、
所定の入力残高があるものとして処理されるトランザクションとなります。

=== マークルツリーとマークルルート

ブロックごとにすべてのトランザクションを保存していたら、
コインノードのディスクはやがてトランザクションデータで溢れてしまうことでしょう。

そこでマークルツリーという仕組みが bitcoin には導入されています。

あるブロックに含まれているトランザクション1〜4があったとして、
HASH(Tx1), HASH(Tx2), ... HASH(Tx4) を求めます。
そしたら、HASH(Tx1) と HASH(Tx2) を接続して 512bit のデータとしてハッシュ値を計算します。
HASH(HASH(Tx1)+HASH(Tx2)) というわけですね。同様に HASH(HASH(Tx3)+HASH(Tx4)) を計算して、
それをさらに…と、ハッシュ値の接続とハッシュ値計算を再帰的に行っていきます。

こうすると、ハッシュ値による二分木が完成します。
これをマークルツリーと呼び、根っこにあたるハッシュ値を
マークルルートと呼んでいます。

=== マイニングと Nonce

さて、一般的に暗号通貨のマイニングと呼ばれている処理、
これは一体何を行っているのでしょうか？

ブロックごとに「前ブロックのハッシュ値」「対象ブロックのマークルルート」
「タイムスタンプ（秒単位）」「Nonce」を連結したもののハッシュ値を求めて、
先頭何ビットかが 0 になるような Nonce 値を探す、ということを行っています。

これがいわゆるマイニングと呼ばれる行為の中身ですが、
先頭何ビットが 0 になれば良いか、というのを決めるために
difficulty というパラメータが存在しています。

このパラメータを上手い感じで決定することで、平均するとおよそ10分で
１ブロック発掘できるように（bitcoin の場合）調整されています。

=== コインベーストランザクションとエクストラ Nonce

前述したとおり、ハッシュ値はほぼほぼランダムな値を取るため、
Nonce を全探索しても所定の長さの 0 で始まるハッシュ値を得ることができない
可能性があります。そこで役に立つのがコインベーストランザクションです。

コインベーストランザクションは前述の通り各ブロックにただ１つ
存在するものですが、入力が接続されていないため、
入力側リンクの、電子署名を書くべき領域は誰も参照しないという特徴があります。

そこで、ここにランダムな値を入れてしまいます。
そうするとどうなるか。コインベーストランザクションのデータが変化するため、
コインベーストランザクションのハッシュ値、つまり TXID が変化します。
すると再帰的にマークルツリーの各ハッシュ値が変化して、最終的には
マークルルートの値がまるっと変化することになります。

そうすると、再度 Nonce を全探索することで先頭が 0 で始まるようになる
Nonce を探すことができるようになります。

この特徴のため、コインベーストランザクションの入力リンクデータ領域は
エクストラ Nonce と呼ばれたりもしています。
ASIC マイニング装置などで、4GH/s を超えるシステムでは必ず導入されている仕組みです。

=== TXID の衝突確率と鳩ノ巣原理とバースデイパラドックス

さて、少し前に TXID は衝突の可能性があるとお話ししました。
それは一体どの程度の確率でしょうか？

仮定として、256bit のハッシュ値はすべての値が同じ確率で出現する（一様分布する）ものとします。

鳩ノ巣原理というものをご存じでしょうか？
例えば５つの鳩ノ巣があった時、鳩が６羽いると、
必ず１つの巣には２羽入ってしまうという原理です。
当たり前と言えば当たり前ですが、TXID 衝突の話で言えば、
2^256+1 個目のトランザクションが発生した瞬間、確実に１つは
衝突するということができます。

まぁ、そこまで大量のトランザクションが生成されるには
まだまだ時間がかかるため問題にはならないと思われます。

もう１つ、バースデイパラドックスというものをご存知でしょうか？
誰でも１つ、決まっている誕生日というもの、うるう年を考慮しても
366 通り存在することになります。これが仮に均等な確率で決まっているとすると、
ある日付の誕生日である確率は 1/366 しかないので、
例えば「学校のクラスで誕生日が同じ人が存在する」確率は、直感的にはかなり低そうですが、
実はほんの 23 人いれば 50％ の確率で誕生日が同じ人はいる可能性があり、
70 人になれば 99.9％ 以上の確率で誕生日が同じ人がいるという、
直感に反する事実です。

そう、ランダムなもの同士の衝突確率は、実はそんなに低くはないのです。

== TXID の衝突事例と BIP-30

さて、机上の空論は置いといて、本当に TXID は衝突するのでしょうか？

ここまでの説明で気付いた方もいると思いますが、
実は確率論など関係なしに TXID は衝突します。

問題となるのはコインベーストランザクション、マイニングする人が作成する
トランザクションです。このトランザクションの出力側は報酬の受け取り人公開鍵、
つまりマイナーのアドレスで、入力側はエクストラ Nonce です。
ということは、同一の人が掘ったブロックでエクストラ Nonce に同じ値を設定すれば
意図的に TXID を衝突させることができてしまうという問題が存在します。

これは大問題ということで提案されたのが BIP-30 という文書で、
要約すると「過去に、未使用の出力の残ったトランザクションと TXID が衝突した場合、
そのトランザクションは拒絶する」という内容となっています。

単純に「過去に存在した TXID は再利用不可とする」という案も検討された
ようですが、既に生成され使用されたトランザクションの扱いに困るため、却下されたようです。

過去のことなので何とでも言えるのですが、もしここで、
「バージョン番号を上げて、以降は、過去に存在した TXID を再利用不可とする」として
いてくれれば、問題はもっと簡単になったのになぁ…と後悔せざるを得ません。

== BIP-30 から BIP-34 へ

さて、BIP-30 の導入によって、意図的にコインベーストランザクションの
TXID を衝突させることはできなくなりました。同時にバースデイパラドックスでの
衝突も防ぐことができるようになりました。鳩ノ巣原理で衝突した場合は……
その場合はその暗号通貨は終了です。

そして、残念ながらここで話は終わりません。

BIP-30 の違反検査はとても重いという問題があります。
「過去の TXID すべてとの衝突確認をし、衝突していた場合、そのトランザクションに
未使用の出力があるか確認する」という処理を行うためです。
bitcoin のように 10 分に 1 ブロックならそんなに問題にならないと思いきや、
新規に参入したノードが祖先ブロックから一気に同期をする場合など、
以前とは比較にならないほど遅くなってしまったのです。

そこでその問題を解決しようと提案されたのが BIP-34 です。

「エクストラ Nonce 領域は、03 で開始して、続けて
そのブロックの高さをリトルエンディアンで記述すること」
ブロックの高さは一意であるため、このルールを導入することで、
コインベーストランザクション同士の衝突は発生しなくなるのではないか、
という提案です。

バースデイパラドックスのことをすっかり忘れてしまえば、
とりあえず BIP-34 導入以降のコインベーストランザクション同士の衝突検査は
不要になります。というわけで、重くて問題になっていた BIP-30 チェックは
省略されることになりました。

バースデイパラドックスは？ねぇ、バースデイパラドックスによる衝突は？

== BIP-34 以前のトランザクションとの衝突問題

さて、そしてさらに残念なことに、これでもまだ話が終わらないのが、
歴史の一番古い bitcoin の闇の深さを物語っています。

BIP-34 導入以降のコインベーストランザクション同士は衝突しない（ことになっています）が、
BIP-34 導入以前のコインベーストランザクションと、導入以降のコインベーストランザクションが
衝突する可能性が指摘されました。

つまり、何も考えずにエクストラ Nonce を設定していた時代に、
エクストラ Nonce が偶然 03 で始まっていたケースの対応です。

これについては、bitcoin の validation.cpp のコメントで詳細に検討されていて、
要約すると、BIP-34 導入以前のコインベーストランザクションすべてをチェックした結果、
エクストラ Nonce が 03 で始まるものは複数あった、と。

そして、その後ろをブロック高として解釈した場合、つまり衝突の可能性がある
ブロックは、小さい方から３つ並べると 209,921, 490,897, 1,983,702。

まず 209,921 ブロックは BIP-34 適用以前のものなので、
BIP-34 によるチェック省略が行われず適切に検査されるため、影響はないと。

次に、490,897 ですが、ソースコードのコメント執筆時点では
「残り約2週間しかないので、注意深く見守って対応を検討する必要がある。」
とコメントに書いてあります。え、何、神頼み？

まぁ、幸運なことに 490,897 ではマイナーのアドレスが異なったため、
衝突は発生しなかったようです。

そして次、1,983,702 ブロックについては、ソースコードのコメントにこうあります。
「このブロックに到達するまであと25年程度あるので、それを活用して、
将来的に BIP-34 に代わる新たな提案の同意を得る必要がある」。
お、おー。問題の先送り来ました。Y2K 問題って覚えてますか？
2038 年問題とか、皆さんご存知ですよね？

そして、完全にバースデイパラドックスのこと忘れてませんか？

暫定措置として、bitcoin では、BIP-34 の適用は 1,983,702 ブロック以前まで、
という実装になっているため、現状のまま進むと、ある日突然 BIP-30 チェックが
有効化されて、ブロック同期が重くなる、という現象が発生します。

== BIP-30,34 と各種アルトコイン

ここまで bitcoin のお話をしてきましたが、
bitcoin からソースコードを派生してできたアルトコインはどうでしょうか？

例えば monacoin を例に挙げると、BIP-34 適用後のソースコードから
派生して開発が行われています。

つまり、BIP-34 によって意図的な TXID 衝突は防がれていますが、
同時に BIP-30 チェックの省略も導入されています。

しかも、bitcoin と異なり、BIP-34 導入以前のデータが存在しないため、
古いデータとの衝突を考慮する必要もありません。
そのため、monacoin の場合は期限なく BIP-30 チェックを無効化しています。

これが意味することは明白で、バースデイパラドックスで偶然衝突が発生した場合に
対しては完全に無力である、ということです。

== 実際の衝突発生確率

ところで、実際にバースデイパラドックスによって衝突が起きる確率はどの程度でしょうか？

実際に計算してみると分かりますが、ブロックチェイン内の総トランザクション数が
4.8 * 10^37 を超えたあたりで、約1％ の確率で衝突が発生します。
2018/05/29 現在の bitcoin では一日当たり約19.7万トランザクションが生成されているため、
割ると約 6.6 * 10^29 年で衝突確率が 1％ を超えます。

ただし、これはあくまでも「確率」です。
0.000005％ しか当たらない年末ジャンボ宝くじ１等でも、
当たるときには当たります。

それが次のブロックなのか、100年後のブロックなのかは、それこそ、
神のみぞ知る、といったところでしょうか。

== おわりに

いかがでしたでしょうか？
この記事を読んで、現状の暗号通貨がいかにうっすいうっすい氷の上で成り立っているか、
認識していただけたでしょうか？そして、この問題の対応に 0.5 人月近く消耗した
私の怒りと恨みとツラみが、少しでも伝われば幸いです。
